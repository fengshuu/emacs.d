#+TITLE: el-search.el

* Find undocumented defvar

#+begin_src emacs-lisp
`(defvar ,_ ,_)
#+end_src

* Find unnecessary lambda such as (lambda (x) (f x))

#+begin_src emacs-lisp
`(lambda (,arg) (,fun ,arg))
#+end_src

* Find references

For example, to find all (likely) callers of =pcase-let=, use =M-x
el-search-load-path= with:

#+begin_src emacs-lisp
`(pcase-let . ,_)
#+end_src

Try the package elisp-refs.

* Replace key into kbd such as [?\C-x ?l] or "\C-xl" into (kbd "C-x l")

[[info:elisp#Key%20Sequences][info:elisp#Key Sequences]]

To replace

#+begin_src emacs-lisp
(define-key (current-global-map) [?\C-x ?l] #'count-lines-page)
(define-key (current-global-map) "\C-xl"    #'count-lines-page)
#+end_src

into

#+begin_src emacs-lisp
(define-key (current-global-map) (kbd "C-x l") #'count-lines-page)
#+end_src

use

#+begin_src emacs-lisp
  M-x el-search-query-replace RET

  `(define-key ,map ,(and key (or (pred vectorp) (pred stringp))) ,cmd)
  ->
  `(define-key ,map (kbd ,(key-description key)) ,cmd)

  RET
#+end_src

* Find string in code

#+begin_src emacs-lisp
(pred stringp)
#+end_src

Notes that dostring is also considered as *string*.

* Swap function arguments such as (foo a b c) into (foo b a c)

#+begin_src emacs-lisp
`(foo ,a ,b . ,rest)
->
`(foo ,b ,a . ,rest)
#+end_src
* if -> when/unless/cond

Change

#+begin_src emacs-lisp
(if x 100)

(if (not x) 100)

(if (< x 0)
    "x < 0"
  (if (= x 0) "x = 0" "x > 0"))
#+end_src

into

#+begin_src emacs-lisp
(when x 100)

(unless x 100)

(cond ((< x 0) "x < 0")
      ((= x 0) "x = 0")
      (t "x > 0"))
#+end_src

via

#+begin_src emacs-lisp
(iffy-if repl) -> repl
#+end_src
* push -> add-to-list

For example, to replace

#+begin_src emacs-lisp
(push '("\\.rkt[dl]?\\'" . racket-mode) auto-mode-alist)
#+end_src

with

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.rkt[dl]?\\'" . racket-mode))
#+end_src

use

#+begin_src emacs-lisp
`(push ,elt ,lst) -> `(add-to-list ',lst ,elt)
#+end_src

* mapc -> dolist

For example, to change

#+begin_src emacs-lisp
(mapc
 (lambda (x)
   (message "%s" (+ x 100)))
 '(1 2 3))
#+end_src

into

#+begin_src emacs-lisp
(dolist (x '(1 2 3))
  (message "%s" (+ x 100)))
#+end_src

use

#+begin_src emacs-lisp
`(mapc (lambda (,var) . ,body) ,list)
->
`(dolist (,var ,list) . ,body)
#+end_src

* mapcar -> --map

For example, to change

#+begin_src emacs-lisp
(mapcar (lambda (x) (* x x)) '(1 2 3))
#+end_src

into

#+begin_src emacs-lisp
(--map (* it it) '(1 2 3))
#+end_src

use

#+begin_src emacs-lisp
(defun transform-lambda-form-for---map (lambda-form)
  (pcase-let ((`(lambda (,var) . ,body) lambda-form))
    (macroexpand-1
     `(cl-symbol-macrolet ((,var it))
        ,@body))))
#+end_src

and

#+begin_src emacs-lisp
`(mapcar ,lambda-form ,list)
 ->
`(--map ,(transform-lambda-form-for---map lambda-form) ,list)
#+end_src

* 'fun -> #'fun

#+begin_src emacs-lisp
(add-hook 'before-save-hook 'time-stamp)
(add-hook 'before-save-hook #'time-stamp)

`(add-hook ,hook (quote ,f))
->
`(add-hook ,hook (function ,f))
#+end_src

#+begin_src emacs-lisp
(define-key term-mode-map [?\C-c ?\C-j] 'term-char-mode)
(define-key term-mode-map [?\C-c ?\C-j] #'term-char-mode)

`(define-key ,m ,k (quote ,f))
->
`(define-key ,m ,k (function ,f))
#+end_src

* Search nested list such as (catch ... (throw ...))

such as cl-block/cl-return, catch/throw, pcase/app etc

#+begin_src emacs-lisp
(el-search-emacs-elisp-sources '(l ^ 'catch __ (contains (l ^ 'throw))))
(el-search-emacs-elisp-sources '(l ^ 'pcase __ (contains (l ^ 'app))))
#+end_src

* 对于同时存在函数和变量的符号，只搜索变量

比如 ~auto-insert~ 这个符号函数定义和变量定义同时存在。

排除掉函数调用以及一些定义：

#+begin_src emacs-lisp
(l (pred (lambda (x) (not (memq x '(quote defun defgroup defcustom))))) __ 'auto-insert __)
#+end_src
