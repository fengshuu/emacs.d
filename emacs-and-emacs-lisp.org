#+TITLE: Journal on Emacs and Emacs Lisp

* 分别用 let/pcase-let/seq-let/-let 实现同样的需求
Entered on [2017-12-24 Sun 14:08]

#+begin_src emacs-lisp
(let* ((l (benchmark-run (sleep-for .2)))
       (total (nth 0 l))
       (gc (nth 1 l))
       (gc-total (nth 2 l)))
  (list total gc gc-total))
#+end_src

#+RESULTS:
| 0.20749 | 0 | 0.0 |

#+begin_src emacs-lisp
(pcase-let ((`(,total ,gc ,gc-total)
             (benchmark-run (sleep-for .2))))
  (list total gc gc-total))
#+end_src

#+RESULTS:
| 0.20612 | 0 | 0.0 |

#+begin_src emacs-lisp
(seq-let (total gc gc-total) (benchmark-run (sleep-for .2))
  (list total gc gc-total))
#+end_src

#+RESULTS:
| 0.203467 | 0 | 0.0 |

#+begin_src emacs-lisp
(-let (((total gc gc-total)
        (benchmark-run (sleep-for .2))))
  (list total gc gc-total))
#+end_src

#+RESULTS:
| 0.205723 | 0 | 0.0 |

* 一个简单的 [[info:elisp#Generic%20Functions][Generic Functions]] 例子
Entered on [2017-12-25 Mon 11:43]

根据参数的类型自动选择不同的方法。

#+begin_src emacs-lisp
(cl-defgeneric foo-size (x)
  "Return the size of x.")

(cl-defmethod foo-size ((s string))
  "Return the size of the string S."
  (length s))

(cl-defmethod foo-size ((b buffer))
  "Return the size of the buffer B."
  (buffer-size b))
#+end_src

#+RESULTS:
: foo-size

#+begin_src emacs-lisp
(foo-size "hello")
#+end_src

#+RESULTS:
: 5

#+begin_src emacs-lisp
(with-temp-buffer
  (insert "hello")
  (foo-size (current-buffer)))
#+end_src

#+RESULTS:
: 5

* Use =M-x ediff-regions-wordwise= to diff sexps (list)
Entered on [2017-12-27 Wed 14:52]

#+begin_example
(bar baz qux quux corge grault garply waldo fred plugh)
(bar baz qux quux corge thud grault garply waldo fred xyzzy plugh)
#+end_example

and ignore white spaces can be userful

#+begin_src emacs-lisp
(setq ediff-diff-options "-w")
#+end_src

[[https://emacs.stackexchange.com/questions/22313/sexp-diff-like-mode-for-elisp-source-diffing][Sexp-diff like mode for elisp source diffing - Emacs Stack Exchange]]

* cl-block and cl-return
Entered on [2017-12-29 Fri 21:41]

cl-block/cl-return is like catch/throw

#+begin_src emacs-lisp
(catch 'found
  1
  2
  (throw 'found 100)
  3)
#+end_src

#+RESULTS:
: 100

#+begin_src emacs-lisp
(cl-block nil
  1
  2
  (cl-return 100)
  3)
#+end_src

#+RESULTS:
: 100

cl-defun/cl-dotimes/etc implies cl-block

#+begin_src emacs-lisp
(cl-defun foo ()
  1
  2
  (cl-return-from foo 100)
  3)
(foo)
#+end_src

#+RESULTS:
: 100

#+begin_src emacs-lisp
(let (res)
  (cl-dotimes (i 10000)
    (if (< i 4)
        (push i res)
      (cl-return)))
  (nreverse res))
#+end_src

#+RESULTS:
| 0 | 1 | 2 | 3 |

* Copy the prompt of the MiniBuffer
Entered on [2017-12-30 Sat 14:13]

Like shell/eshell/comint, find a way to move point (for example, ~C-b~
(~backward-char~)) within the prompt then mark-copy as usual.

[[https://emacs.stackexchange.com/questions/15198/how-to-copy-minibuffer-contents][echo area - How to copy minibuffer contents? - Emacs Stack Exchange]]
* Hash Table in Emacs Lisp
Entered on [2018-01-04 Thu 00:58]

** Create Hash Table

Use ~make-hash-table~

#+begin_src emacs-lisp
(make-hash-table :test #'equal)
#+end_src

#+RESULTS:
: #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ())

Use the printed representation

#+begin_src emacs-lisp
#s(hash-table test equal data (:one 1 :two 2))
#+end_src

#+RESULTS:
: #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data (:one 1 :two 2))

** Access Hash Table

Add and lookup

#+begin_src emacs-lisp
(let ((hash (make-hash-table :test #'eq)))
  (puthash :one 1 hash)
  (puthash :two 2 hash)
  (list :one (gethash :one hash)
        :two (gethash :two hash)))
#+end_src

#+RESULTS:
| :one | 1 | :two | 2 |

Remove

#+begin_src emacs-lisp
(let ((hash #s(hash-table test eq data (:one 1 :two 2))))
  (remhash :one hash)
  hash)
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data ( :two 2))

Clear (remove all)

#+begin_src emacs-lisp
(let ((hash #s(hash-table test eq data (:one 1 :two 2))))
  (clrhash hash)
  hash)
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data ())

Lookup all

#+begin_src emacs-lisp
(let (alist)
  (maphash
   (lambda (key value)
     (push (cons key value) alist))
   #s(hash-table data (:one 1 :two 2)))
  alist)
#+end_src

#+RESULTS:
: ((:two . 2) (:one . 1))

Count

#+begin_src emacs-lisp
(hash-table-count #s(hash-table data (a 1 b 2)))
#+end_src

#+RESULTS:
: 2

Keys & Values (hash-table-keys and hash-table-values is defined by subr-x.el)

#+begin_src emacs-lisp
(hash-table-keys #s(hash-table data (one 1 two 2 three 3)))
#+end_src

#+RESULTS:
| one | two | three |

#+begin_src emacs-lisp
(hash-table-values #s(hash-table data (one 1 two 2 three 3)))
#+end_src

#+RESULTS:
| 1 | 2 | 3 |

Performance (vs Alist)

#+begin_src emacs-lisp
(let ((alist nil)
      (hash (make-hash-table :test #'eq)))
  (mapatoms
   (lambda (symbol)
     (let ((key symbol)
           (val (length (symbol-name symbol))))
       (push (cons key val) alist)
       (puthash key val hash))))
  (let ((t1 (car (benchmark-run 1000 (assq 'length alist))))
        (t2 (car (benchmark-run 1000 (gethash 'length hash)))))
    (message "Alist takes %.5fs, Hash Table takes %.5fs" t1 t2)))
#+end_src

#+RESULTS:
: Alist takes 1.97789s, Hash Table takes 0.00017s

* setf
Entered on [2018-01-07 Sun 01:54]

Modify element of list

#+begin_src emacs-lisp :results pp
(let ((l '(0 1 2 3 4 5 6)))
  (setf (nth 3 l) 100)
  l)
#+end_src

#+RESULTS:
: (0 1 2 100 4 5 6)

#+begin_src emacs-lisp :results pp
(let ((l '(0 1 2 3 4 5 6)))
  (setcar (nthcdr 3 l) 100)
  l)
#+end_src

#+RESULTS:
: (0 1 2 100 4 5 6)

Move point

#+begin_src emacs-lisp :results pp
(macroexpand '(setf (point) (point-min)))
#+end_src

#+RESULTS:
: (goto-char
:  (point-min))

cl-callf

#+begin_src emacs-lisp :results pp
(let ((l '(0 1 2 3 4 5 6)))
  (cl-callf + (nth 3 l) 100)
  l)
#+end_src

#+RESULTS:
: (0 1 2 103 4 5 6)

#+begin_src emacs-lisp :results pp
(let ((alist '((one . 1)
               (two . 2)
               (thr . 3)
               (fou . 4))))
  (setf (alist-get 'one alist) 100)
  (cl-callf + (alist-get 'two alist) -2)
  alist)
#+end_src

#+RESULTS:
: ((one . 100)
:  (two . 0)
:  (thr . 3)
:  (fou . 4))

Define new setf form

#+begin_src emacs-lisp :results pp
(gv-define-setter length (val x) `(substring ,x 0 ,val))
(setf (length "hello") 2)
#+end_src

#+RESULTS:
: "he"

* Recursive Editing
Entered on [2018-01-07 Sun 15:55]

[[info:elisp#Recursive%20Editing][info:elisp#Recursive Editing]]

在 Emacs command loop 中运行另外一个 command loop，比如 ~ediff-regions-wordwise~ 中间需要让用户选中两个区域，就可以用 ~recursive-edit~ ，Debug 和 Isearch 等地方也有用到。

举个例子，我需要让用户从 Dired 中选中一个文件来处理：

#+begin_src emacs-lisp
(defun foo ()
  (interactive)
  (dired ".")
  (message
   (substitute-command-keys
    "When done, type \\[exit-recursive-edit]. Use \\[abort-recursive-edit] to quit"))
  (recursive-edit)
  (message "You have picked '%s'" (dired-get-filename)))
#+end_src

#+RESULTS:
: foo

* Protect form from =(recursive-edit)=
Entered on [2018-01-09 Tue 16:56]

#+begin_src emacs-lisp
(progn
  (unwind-protect
      (recursive-edit)
    (message-box "Always run"))
  (message-box "Only run with 'C-M-c' ('exit-recursive-edit')")
  nil)
#+end_src

#+begin_src emacs-lisp
(progn
  (condition-case nil
      (recursive-edit)
    (quit (message-box "Only run with 'C-]' ('abort-recursive-edit')")))
  (message-box "Always run")
  nil)
#+end_src

#+begin_src emacs-lisp
(progn
  (condition-case err
      (recursive-edit)
    (quit
     (message-box "Only run with 'C-]' ('abort-recursive-edit')")
     (signal (car err) (cdr err))))
  (message-box "Only run with 'C-M-c' ('exit-recursive-edit')")
  nil)
#+end_src

* 一次性去掉所有的 Advice
Entered on [2018-01-09 Tue 21:29]

添加：

#+begin_src emacs-lisp :results silent
(advice-add #'emacs-version :filter-return #'upcase)
(advice-add #'emacs-version :filter-return #'nreverse)
(advice-add #'emacs-version :filter-return (lambda (x) (concat "=> " x)))
#+end_src

检查：

#+begin_src emacs-lisp :results pp
(defun chunyang-function-advices (symbol)
  (let (advices)
    (advice-mapc
     (lambda (f _)
       (push f advices))
     symbol)
    (nreverse advices)))

(chunyang-function-advices 'emacs-version)
#+end_src

#+RESULTS:
: ((lambda
:    (x)
:    (concat "=> " x))
:  nreverse upcase)

删除：

#+begin_src emacs-lisp :results pp
(advice-mapc
 (lambda (f _)
   (advice-remove 'emacs-version f))
 'emacs-version)

(chunyang-function-advices 'emacs-version)
#+end_src

#+RESULTS:
: nil

* Structure
Entered on [2018-01-11 Thu 17:42]

#+begin_src emacs-lisp
  ;; * Define structure
  (cl-defstruct person
    name
    age
    sex)
       => person

  ;; * Make object of structure
  (setq P (make-person :name (rot13-string user-full-name)
                       :age 99
                       :sex "TWFsZQ=="))
       => #s(person "Kh Puhalnat" 99 "TWFsZQ==")

  ;; * Access slots

  (person-name P)
       => "Kh Puhalnat"

  (person-age P)
       => 99

  (person-sex P)
       => "TWFsZQ=="

  ;; * Change slots

  (cl-callf + (person-age P) 100)
       => 142

  (person-age P)
       => 142

  (setf (person-name P) (md5 user-full-name))
       => "670a835cea7294c07ccb015c6ec651dd"

  (person-name P)
       => "670a835cea7294c07ccb015c6ec651dd"

  ;; * Type Check

  (person-p P)
       => t

  ;; * Create object using printd representation
  (let ((not-me #s(person "某某" 22 "Unknown")))
    (person-p not-me))
       => t
#+end_src

* Swap multiple variables at a time
Entered on [2018-01-11 Thu 18:47]

#+begin_src emacs-lisp
  (let ((x1 +1) (x2 +2) (x3 +3)
        (y1 -1) (y2 -2) (y3 -3))
    (cl-psetq x1 y1
              y1 x1
              x2 y2
              y2 x2
              x3 y3
              y3 x3)
    (list (list x1 x2 x3) (list y1 y2 y3)))
#+end_src

#+RESULTS:
| -1 | -2 | -3 |
|  1 |  2 |  3 |

#+BEGIN_SRC emacs-lisp
  (let ((a 1) (b 2) (c 3)
        (x -1) (y -2) (z -3))
    (cl-rotatef a x)
    (cl-rotatef b y)
    (cl-rotatef c z)
    (list (list a b c) (list x y z)))
#+END_SRC

#+RESULTS:
| -1 | -2 | -3 |
|  1 |  2 |  3 |

#+begin_src emacs-lisp
(defmacro chunyang-swap-varsf (vars-1 vars-2)
  (cons 'cl-psetf
        (cl-loop for x in vars-1
                 for y in vars-2
                 append (list x y y x))))

(let ((a 1) (b 2) (c 3)
      (x -1) (y -2) (z -3))
  (chunyang-swap-varsf (a b c) (x y z))
  (list (list a b c) (list x y z)))
#+end_src

#+RESULTS:
| -1 | -2 | -3 |
|  1 |  2 |  3 |

* ~thread-first~ and ~thread-last~ :25.1:
Entered on [2018-02-18 Sun 15:44]


For example, get parent directory

#+begin_src emacs-lisp
(file-name-nondirectory
 (directory-file-name
  (file-name-directory
   "~/.emacs.d/init.el")))
#+end_src

#+RESULTS:
: .emacs.d

#+begin_src emacs-lisp
(thread-first "~/.emacs.d/init.el"
  file-name-directory
  directory-file-name
  file-name-nondirectory)
#+end_src

#+RESULTS:
: .emacs.d

#+begin_src emacs-lisp
(thread-last "~/.emacs.d/init.el"
  file-name-directory
  directory-file-name
  file-name-nondirectory)
#+end_src

#+RESULTS:
: .emacs.d

* ~thunk-let~ and ~thunk-let~ :27.1:
Entered on [2018-02-21 Wed 02:20]

#+begin_src emacs-lisp :lexical t
(with-temp-buffer
  (thunk-let ((a (insert "1"))
              (b (insert "2")))
    (insert "3")
    b
    a)
  (buffer-string))
#+end_src

#+RESULTS:
: 321

* ~read-answer~ :27.1:
Entered on [2018-02-23 Fri 18:27]

#+begin_src emacs-lisp
(read-answer
 "Are you sure? "
 '(("yes"  ?y "perform the action")
   ("no"   ?n "skip to the next")
   ("all"  ?! "accept all remaining without more questions")
   ("help" ?h "show help")
   ("quit" ?q "exit")))
#+end_src

#+RESULTS:
: yes

* ~make-symbol~ vs ~intern~
Entered on [2018-03-21 Wed 15:41]

#+begin_src elisp
(assq (make-symbol "one") '((one . 1)))
     => nil

(assq (intern "one") '((one . 1)))
     => (one . 1)

(let ((alist (list (cons (make-symbol "one") 1))))
  (list (assq 'one alist)
        (assq (make-symbol "one") alist)
        (assq (intern "one") alist)))
     => (nil nil nil)

(eq (intern "foo") (intern "foo"))
     => t

(eq (make-symbol "foo") (make-symbol "foo"))
     => nil
#+end_src

* 获得一个 Emacs Package 的主页
Entered on [2018-03-22 Thu 15:00]

#+begin_src elisp
(oref (epkg "magit") homepage)
#+end_src

#+RESULTS:
: https://github.com/magit/magit

[[info:epkg#Using%20Epkg%20Objects][info:epkg#Using Epkg Objects]]

* Reuse interactive form
Entered on [2018-03-23 Fri 13:04]

获得

#+begin_src elisp
(interactive-form 'find-file)
#+end_src

#+RESULTS:
| interactive | (byte-code \300\301\302 "\207 [find-file-read-args Find file:  confirm-nonexistent-file-or-buffer] 3) |

重用

#+begin_src elisp
(eval (cadr (interactive-form 'find-file)))
#+end_src

在某些特殊情况下，指的是没经过 byte-compile 和用 list 构造，甚至能选择重用哪一部分

#+begin_src elisp
(defun foo (string number)
  (interactive (list (read-string "String: ")
                     (read-number "Number: "))))
#+end_src

#+begin_src elisp :results value pp
(interactive-form 'foo)
#+end_src

#+RESULTS:
: (interactive
:  (list
:   (read-string "String: ")
:   (read-number "Number: ")))

#+begin_src elisp :results value pp
(pcase-let ((`(interactive (list ,string ,number))
             (interactive-form 'foo)))
  (list string number))
#+end_src

#+RESULTS:
: ((read-string "String: ")
:  (read-number "Number: "))
