# -*- eval: (toc-org-mode); -*-

#+PROPERTY: header-args:elisp :results pp

* Table of Contents                                               :TOC:QUOTE:
#+BEGIN_QUOTE
- [[#defsubst][=defsubst=]]
- [[#1--2--3----100][1 + 2 + 3 + ... + 100]]
- [[#1-2-3--list-1-2-3][='(1 2 3)= ≠ =(list 1 2 3)=]]
- [[#cl-loop][=cl-loop=]]
  - [[#append-vs-collect][=append= vs =collect=]]
  - [[#in-ref-vs-in][=in-ref= vs =in=]]
  - [[#into][=into=]]
  - [[#nconc-vs-append][=nconc= vs =append=]]
  - [[#return][=return=]]
  - [[#if][=if=]]
  - [[#by][=by=]]
  - [[#across-ref][=across-ref=]]
  - [[#vconcat][=vconcat=]]
  - [[#nest-cl-loop][nest cl-loop]]
  - [[#byte-compiling-cl-loop-is-important][Byte-compiling cl-loop is important]]
- [[#parsec][parsec]]
- [[#how-does-emacs-lisp-completion-work][How does Emacs Lisp Completion work?]]
  - [[#how-does-emacs-do-completion][How does Emacs do completion?]]
  - [[#global-functions--variables][Global Functions & Variables]]
  - [[#local-variables][Local variables]]
- [[#20--21--22----2n--2n1---1][2^0 + 2^1 + 2^2 + ... + 2^n = 2^(n+1) - 1]]
- [[#10n--7][10^n % 7]]
- [[#7n-的个位数][7^n 的个位数]]
- [[#how-to-extend-pcase][How to extend pcase?]]
- [[#sn--a_1--a_2----a_n][S(n) = a_1 + a_2 + ... + a_n]]
- [[#variable-vs-function---symbol][variable vs function  | Symbol]]
- [[#delete-first-element-of-list][Delete first element of list]]
- [[#transient][Transient]]
- [[#deal-with-interactive-from-in-advice][Deal with Interactive from in Advice]]
#+END_QUOTE

* =defsubst=

使用 =defsubst= 定义 Inline Function —— 像 Macro 的 Function。

#+BEGIN_SRC elisp
(defsubst foo () (message "Foo is an inline funciton"))
#+END_SRC

#+RESULTS:
: foo

经过 Byte-compile，调用 Inline Function 的地方会像 Macro 那样直接插入 Function Body，从而避免函数调用的负担。

#+BEGIN_SRC elisp
(defun bar () (foo))
(byte-compile 'bar)
(symbol-function 'bar)
#+END_SRC

#+RESULTS:
: #[nil "\300\301!\207" [message "Foo is an inline funciton"] 2]

* 1 + 2 + 3 + ... + 100

Bad (waste space)

#+BEGIN_SRC elisp
(apply #'+ (number-sequence 1 100))
#+END_SRC

#+RESULTS:
: 5050

Bad

#+BEGIN_SRC elisp
(cl-reduce #'+ (number-sequence 1 100))
#+END_SRC

#+RESULTS:
: 5050

Best

#+BEGIN_SRC elisp
(cl-loop for i from 1 to 100
         sum i)
#+END_SRC

#+RESULTS:
: 5050

Good

#+BEGIN_SRC elisp
(let ((i 1)
      (sum 0))
  (while (<= i 100)
    (setq sum (+ sum i))
    (setq i (1+ i)))
  sum)
#+END_SRC

#+RESULTS:
: 5050

Good

#+BEGIN_SRC elisp
(require 'stream)
(seq-reduce #'+ (stream-range 1 101) 0)
#+END_SRC

#+RESULTS:
: 5050

* ='(1 2 3)= ≠ =(list 1 2 3)=

这两种写法有本质不同，有时能交换使用，有时又不能。选中那种写法首先考虑对不对，然后在考虑风格。

- =`(,1 2 3)= ≠ =(list 1 2 3)=
- =`(,1 ,2 3)= ≠ =(list 1 2 3)=
- =`(,1 ,2 ,3)= = =(list 1 2 3)=

=bar= 一般属于错误：

#+BEGIN_SRC elisp
(defun foo () (list 1 2 3))
(defun bar () '(1 2 3))
#+END_SRC

#+RESULTS:
: bar

#+BEGIN_SRC elisp :results pp
(cl-incf (car (bar)) 100)
(cl-incf (car (bar)) 100)
(symbol-function 'bar)
#+END_SRC

#+RESULTS:
: (lambda nil
:   '(201 2 3))

* =cl-loop=

** =append= vs =collect=

#+BEGIN_SRC elisp
(cl-loop for k in '(1 2 3)
         for v in '(a b c)
         collect (list k v))
#+END_SRC

#+RESULTS:
: ((1 a)
:  (2 b)
:  (3 c))

#+BEGIN_SRC elisp
(cl-loop for k in '(1 2 3)
         for v in '(a b c)
         append (list k v))
#+END_SRC

#+RESULTS:
: (1 a 2 b 3 c)

** =in-ref= vs =in=

#+BEGIN_SRC elisp
(let ((nums (list 1 2 3)))
  (cl-loop for i in nums
           do (cl-incf i))
  nums)
#+END_SRC

#+RESULTS:
: (1 2 3)

#+BEGIN_SRC elisp
(let ((nums (list 1 2 3)))
  (cl-loop for i in-ref nums
           do (cl-incf i))
  nums)
#+END_SRC

#+RESULTS:
: (2 3 4)

** =into=

#+BEGIN_SRC elisp
(cl-loop for i from 1 to 100
         sum i into result
         finally return (format "1 + 2 + 3 ... + 100 = %s" result))
#+END_SRC

#+RESULTS:
: "1 + 2 + 3 ... + 100 = 5050"

** =nconc= vs =append=

#+BEGIN_SRC elisp
(let ((l (list (list 1) (list 2) (list 3))))
  (cl-loop for i in l
           append i)
  l)
#+END_SRC

#+RESULTS:
: ((1)
:  (2)
:  (3))

#+BEGIN_SRC elisp
(let ((l (list (list 1) (list 2) (list 3))))
  (cl-loop for i in l
           nconc i)
  l)
#+END_SRC

#+RESULTS:
: ((1 2 3)
:  (2 3)
:  (3))

** =return=

#+BEGIN_SRC elisp
(cl-loop for i from 1
         when (> i 100)
         return "look ma, not catch/throw")
#+END_SRC

#+RESULTS:
: "look ma, not catch/throw"

** =if=

#+BEGIN_SRC elisp
(cl-loop for i from 1 to 10
         if (cl-evenp i)
         collect i into evens
         else
         collect i into odds
         finally return (list odds evens))
#+END_SRC

#+RESULTS:
: ((1 3 5 7 9)
:  (2 4 6 8 10))

** =by=

#+BEGIN_SRC elisp
(cl-loop for (a b) on '(1 2 3 4 5 6) by #'cddr
         collect (cons a b))
#+END_SRC

#+RESULTS:
: ((1 . 2)
:  (3 . 4)
:  (5 . 6))

** =across-ref=

#+BEGIN_SRC elisp
;; 2 维数组
(cl-loop with vv = (make-vector 4 nil)
         for v across-ref vv
         do (setq v (make-vector 3 0))
         finally return vv)
#+END_SRC

#+RESULTS:
: [[0 0 0]
:  [0 0 0]
:  [0 0 0]
:  [0 0 0]]

** =vconcat=

#+BEGIN_SRC elisp
(cl-loop for i from 1 to 3
         vconcat (list i))
#+END_SRC

#+RESULTS:
: [1 2 3]

#+BEGIN_SRC elisp
;; 2 维数组
(cl-loop repeat 4
         vconcat (vector (make-vector 3 0)))
#+END_SRC

#+RESULTS:
: [[0 0 0]
:  [0 0 0]
:  [0 0 0]
:  [0 0 0]]

** nest cl-loop

#+BEGIN_SRC elisp
(let ((vv [[1 2 3]
           [4 5 6]
           [7 8 9]]))
  (cl-loop for v across vv
           sum (cl-loop for i across v
                        sum i)))
#+END_SRC

#+RESULTS:
: 45

#+BEGIN_SRC elisp
(let ((vv [[1 2 3]
           [4 5 6]
           [7 8 9]]))
  (cl-loop for v across vv
           append (cl-loop for i across v
                           collect i)))
#+END_SRC

#+RESULTS:
: (1 2 3 4 5 6 7 8 9)

** Byte-compiling cl-loop is important

#+BEGIN_SRC elisp
(defun foo ()
  (cl-loop for i below 10000
           do (cl-loop for j below 10000)))

(benchmark-run 1 (foo))
#+END_SRC

#+RESULTS:
: (18.556844 1 0.09451100000001134)

#+BEGIN_SRC elisp
(defun bar ()
  (cl-loop for i below 10000
           do (cl-loop for j below 10000)))

(byte-compile 'bar)
(benchmark-run 1 (bar))
#+END_SRC

#+RESULTS:
: (2.316306 0 0.0)

* parsec

#+BEGIN_SRC elisp
(parsec-with-input "/* hello */"
  (parsec-string "/*")
  (parsec-many-till-as-string (parsec-any-ch)
                              (parsec-try
                               (parsec-string "*/"))))
#+END_SRC

#+RESULTS:
: " hello "

* How does Emacs Lisp Completion work?

** How does Emacs do completion?

#+BEGIN_SRC elisp
(with-temp-buffer
  (emacs-lisp-mode)
  completion-at-point-functions)
#+END_SRC

#+RESULTS:
: (elisp-completion-at-point t)

** Global Functions & Variables

#+BEGIN_SRC elisp
(all-completions "emacs-lisp" obarray #'functionp)
#+END_SRC

#+RESULTS:
: ("emacs-lisp-byte-compile-and-load" "emacs-lisp-mode" "emacs-lisp-macroexpand" "emacs-lisp-byte-compile")

** Local variables

#+BEGIN_SRC elisp
(with-temp-buffer
  (emacs-lisp-mode)
  (insert "(let ((foo 1) (bar 2)) (+ foo ))")
  (backward-char 2)
  (elisp--local-variables))
#+END_SRC

#+RESULTS:
: (bar foo)

#+BEGIN_SRC elisp
(elisp--local-variables-1 nil '(let ((foo 1) (bar 2)) (+ foo elisp--witness--lisp)))
#+END_SRC

#+RESULTS:
: (bar foo)

#+BEGIN_SRC elisp
(elisp--local-variables-1
 nil
 '(let ((foo 1))
    (let ((bar 2))
      (let ((baz 3))
        (+ foo elisp--witness--lisp)))))
#+END_SRC

#+RESULTS:
: (baz bar foo)

#+BEGIN_SRC elisp
(pcase '(let ((foo 1) (bar 2)) (+ foo elisp--witness--lisp))
  (`(let ,bindings . ,body) (mapcar #'car bindings)))
#+END_SRC

#+RESULTS:
: (foo bar)

* 2^0 + 2^1 + 2^2 + ... + 2^n = 2^(n+1) - 1

等比数列求和

#+BEGIN_SRC elisp
(cl-loop for i from 0 to 10
         sum (expt 2 i))
#+END_SRC

#+RESULTS:
: 2047

#+BEGIN_SRC elisp
(1- (expt 2 11))
#+END_SRC

#+RESULTS:
: 2047

\begin{equation}
S_n = \frac{a(q^n - 1)}{q - 1}
\end{equation}

#+BEGIN_SRC elisp
(defun geometric-series-sum (a q n)
  "Return a*q^0 + a*q^1 + a*q^2 + ... + a*q^1."
  (/ (* a (- (expt q n) 1))
     (- q 1)))

(geometric-series-sum 1 2 11)
#+END_SRC

#+RESULTS:
: 2047

* 10^n % 7

#+BEGIN_SRC elisp :results table drawer
(cl-loop for n from 0 to 17
         collect (% (expt 10 n) 7))
#+END_SRC

#+RESULTS:
:RESULTS:
| 1 | 3 | 2 | 6 | 4 | 5 | 1 | 3 | 2 | 6 | 4 | 5 | 1 | 3 | 2 | 6 | 4 | 5 |
:END:

#+BEGIN_SRC elisp
(defun 10^n%7 (n)
  "Return 10^n % 7."
  (nth (% n 6) '(1 3 2 6 4 5)))

(10^n%7 100)
#+END_SRC

#+RESULTS:
: 4

* 7^n 的个位数

#+BEGIN_SRC elisp
(cl-loop for n from 0 to 20
         collect (% (expt 7 n) 10))
#+END_SRC

#+RESULTS:
: (1 7 9 3 1 7 9 3 1 7 9 3 1 7 9 3 1 7 9 3 1)

#+BEGIN_SRC elisp
(defun 7^n-digit (n)
  (nth (% n 4) '(1 7 9 3)))

(7^n-digit 987654321)
#+END_SRC

#+RESULTS:
: 7

* How to extend pcase?

use pcase-defmacro

#+BEGIN_SRC elisp
(pcase-defmacro my-alist (&rest patterns)
  (cl-loop for pat in patterns
           collect `(app (alist-get ',pat) ,pat) into aux
           finally return `(and ,@aux)))

(pcase '((a . 1) (b . 2) (c . 3) (d . 4))
  ((my-alist a b c d) (list a b c d)))
#+END_SRC

* S(n) = a_1 + a_2 + ... + a_n

#+BEGIN_SRC elisp
(defun my-sum (a k n)
  "S(n) = a_1 + a_2 + ... + a_n.
a_i+1 - a_i = k."
  (cl-loop for i from a by k
           repeat n
           sum i))

(defun my-better-sum (a k n)
  (/ (* (+ a (+ a (* (- n 1) k))) n) 2))

(list (my-sum 1 1 100)
      (my-sum 1 2 50)
      (my-better-sum 1 1 100)
      (my-better-sum 1 2 50))
#+END_SRC

#+RESULTS:
: (5050 2500 5050 2500)

* variable vs function  | Symbol

#+BEGIN_SRC elisp
(defun my-eval (expr)
  (pcase expr
    (`((lambda . ,_) . ,_) (apply (car expr) (cdr expr)))
    (`(,(and (pred symbolp)
             (pred symbol-function)
             (app symbol-function function))
       . ,args)
     (my-eval (cons function args)))))
#+END_SRC

* Delete first element of list

#+BEGIN_SRC elisp
(let ((l (list 1 2 3 4 5)))
  (setcar l (cadr l))
  (setcdr l (cddr l))
  l)
#+END_SRC

#+RESULTS:
: (2 3 4 5)

#+BEGIN_SRC elisp
(defun delete-first (l)
  (cl-assert (> (length l) 1))
  (setcar l (cadr l))
  (setcdr l (cddr l)))

(let ((l (list 1 2 3 4 5)))
  (delete-first l)
  l)
#+END_SRC

#+RESULTS:
: (2 3 4 5)

* Transient

#+BEGIN_SRC elisp
(define-infix-argument my-grep:--regexp ()
  :description "PATTERN"
  :class 'transient-option
  :key "-e"
  :argument "--regexp=")

(define-transient-command foo ()
  "Foo."
  ["Arguments"
   (my-grep:--regexp)
   ("-i" "Ignore Case" "--ignore-case")]
  ["Do"
   ("g" "grep" foo-grep)])

(defun foo-grep ()
  (interactive)
  (message "[DEBUG] %S" (transient-args 'foo)))
#+END_SRC

#+RESULTS:
: foo-grep

* Deal with Interactive from in Advice

#+BEGIN_SRC elisp
(defun greeting (name age)
  (interactive "sName: \nnAge: ")
  (message "Hi, I'm %s, %d years old!" name age))
#+END_SRC

如果 FUNCTION 没有 Interactive Form，那么会继承旧的 Interactive Form：

#+BEGIN_SRC elisp
(define-advice greeting (:around (old-fun name age) foo)
  (message "Hello, my name is %s" name))
#+END_SRC

#+RESULTS:
: greeting@foo

如果 FUNCTION 有 Interactive Form，那么会覆盖旧的 Interactive Form:

#+BEGIN_SRC elisp
(define-advice greeting (:around (old-fun &rest args) foo)
  (interactive "sWhat's your name? \nnHow old are you? ")
  (apply old-fun args))
#+END_SRC

#+RESULTS:
: greeting@foo

如果 Function 的 Interactive Form 是个函数，则传进旧的 Interactive Spec：

#+BEGIN_SRC elisp
(define-advice greeting (:around (old-fun &rest args) foo)
  (interactive (lambda (spec)
                 (message "[DEBUG] %s" spec)
                 (message nil)
                 (setq spec (replace-regexp-in-string "Name:" "What's your name?" spec t t))
                 (advice-eval-interactive-spec spec)))
  (apply old-fun args))
#+END_SRC

#+RESULTS:
: greeting@foo
