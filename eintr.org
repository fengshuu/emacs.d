#+TITLE: "An Introduction to Programming in Emacs Lisp" Exercises
#+AUTHOR: Xu Chunyang
#+EMAIL: mail@xuchunyang.me
#+DATE: <2018-05-29 Tue>

#+PROPERTY: header-args:elisp  :results pp

* (info "(eintr) Error Message Exercises")

#+begin_src elisp
  foo
#+end_src

#+begin_src elisp
  (foo)
#+end_src

#+begin_src elisp
  (setq counter 0)

  (setq counter (+ counter 2))
#+end_src

#+RESULTS:
: 2

#+begin_src elisp
  (message "Hello %s!" user-full-name)
#+end_src

#+RESULTS:
: Hello Xu Chunyang!

* (info "(eintr) Evaluation Exercise")

#+begin_src elisp
  (goto-char (/ (buffer-size) 2))
#+end_src

#+begin_src elisp
  (buffer-name)
#+end_src

#+RESULTS:
: eintr.org

#+begin_src elisp
  (buffer-file-name)
#+end_src

#+RESULTS:
: /Users/xcy/.emacs.d/eintr.org

#+begin_src elisp
  (buffer-size)
#+end_src

#+RESULTS:
: 765

#+begin_src elisp
  (point)
#+end_src

#+RESULTS:
: 710

* (info "(eintr) defun Exercises")

#+begin_src elisp
  (defun double (number)
    "Double NUMBER."
    (* number 2))
#+end_src

#+RESULTS:
: double

#+begin_src elisp
  (double 3)
#+end_src

#+RESULTS:
: 6

#+begin_src elisp
  (defun double (number)
    "Double NUMBER."
    (interactive "p")
    (message "The result is %d" (* number 2)))
#+end_src

#+RESULTS:
: double

#+begin_src elisp
  (defun foo (number)
    (interactive "p")
    (if (> number fill-column)
        (message "%d is larger than fill-column" number)))
#+end_src

#+RESULTS:
: foo

* (info "(eintr) Buffer Exercises")

#+begin_src elisp
  (defun simplified-end-of-buffer ()
    "Move point to the end of the buffer, leave mark at previous position."
    (interactive)
    (push-mark)
    (goto-char (point-max)))
#+end_src

#+RESULTS:
: simplified-end-of-buffer

#+begin_src elisp
  (defun test-if-a-buffer-exists (buffer)
    (interactive "BBuffer: ")
    (if (get-buffer buffer)
        (message "Buffer %s exists" buffer)))
#+end_src

#+RESULTS:
: test-if-a-buffer-exists

#+begin_src elisp
  (test-if-a-buffer-exists "*Help*")
#+end_src

#+RESULTS:
: Buffer *Help* exists

#+begin_src elisp
  (xref-find-definitions "copy-to-buffer")
#+end_src

* (info "(eintr) optional Exercise")

#+begin_src elisp
  (defun foo (&optional arg)
    (interactive "p")
    (unless arg
      (setq arg 50))
    (if (>= arg fill-column)
        (message "%s is equal or larger than fill-column" arg)
      (message "%s is smaller than fill-column" arg)))
#+end_src

* (info "(eintr) narrow Exercise")

#+begin_src elisp
  (defun narrowing-exercise ()
    "Display the first 60 characters of the current buffer."
    (save-restriction
      (widen)
      (message "%s" (buffer-substring (point-min) (+ (point-min) 60)))))

  (narrowing-exercise)
#+end_src

#+RESULTS:
: #+TITLE: "An Introduction to Programming in Emacs Lisp" Exer

* (info "(eintr) cons Exercise")

#+begin_src elisp
  (cons 'a '(b c d))
#+end_src

#+RESULTS:
: (a b c d)

#+begin_src elisp
  (setq birds ())
  (setq birds (cons 'd birds))
  (setq birds (cons 'c birds))
  (setq birds (cons 'b birds))
  (setq birds (cons 'a birds))
  birds
#+end_src

#+RESULTS:
: (a b c d)

#+begin_src elisp
  (let ((birds '(a b c d)))
    (setcar birds 'A)
    (setcdr birds '(B C D))
    birds)
#+end_src

#+RESULTS:
: (A B C D)

* (info "(eintr) search Exercises")

#+begin_src emacs-lisp
  (defun test-search (pattern)
    (interactive "sSearch for: ")
    (search-forward pattern)
    (message "Found!"))
#+end_src

#+RESULTS:
: test-search

#+begin_src emacs-lisp
  (defun print-third-kill-ring ()
    (interactive)
    (if (> (length kill-ring) 2)
        (message "%s" (nth 2 kill-ring))
      (message "kill-ring doesn't have at least three elements")))
#+end_src

#+RESULTS:
: print-third-kill-ring

* (info "(eintr) List Exercise")

#+begin_src emacs-lisp
  (setq flowers '(violet buttercup))
  (setq more-flowers (cons 'bar (cons 'foo flowers)))
  (setcar flowers 'fish)
  more-flowers
#+end_src

#+RESULTS:
| bar | foo | fish | buttercup |

* (info "(eintr) yank nthcdr Exercises")

#+begin_src emacs-lisp
  (let ((numbers '(1 2 3 4)))
    (list (car numbers)
          (car (nthcdr 1 numbers))
          (car (nthcdr 2 numbers))
          (car (nthcdr 3 numbers))))
#+end_src

#+RESULTS:
| 1 | 2 | 3 | 4 |

* (info "(eintr) Looping exercise")

#+begin_src emacs-lisp
  (defun triangle-square (number-of-rows)
    (let ((total 0)
          (row-number 1))
      (while (<= row-number number-of-rows)
        (setq total (+ total (* row-number row-number)))
        (setq row-number (1+ row-number)))
      total))

  (triangle-square 4)
#+end_src

#+RESULTS:
: 30

#+begin_src emacs-lisp
  (defun triangle-multiple (number-of-rows)
    (let ((total 1)
          (row-number 1))
      (while (<= row-number number-of-rows)
        (setq total (* total row-number))
        (cl-incf row-number))
      total))

  (= (triangle-multiple 4)
     (* 1 2 3 4))
#+end_src

#+RESULTS:
: t

#+begin_src emacs-lisp
  (defun triangle-square (number-of-rows)
    (if (= number-of-rows 0)
        0
      (+ (* number-of-rows number-of-rows)
         (triangle-square (1- number-of-rows)))))

  (triangle-square 4)
#+end_src

#+RESULTS:
: 30

#+begin_src emacs-lisp
  (defun triangle-multiple (n)
    (if (= n 0) 1
      (* n (triangle-multiple (1- n)))))

  (triangle-multiple 4)
#+end_src

#+RESULTS:
: 24

* (info "(eintr) re-search Exercises")

#+begin_src emacs-lisp
  (defun blank-lines ()
    (interactive)
    (re-search-forward "^\\(?:[ \t]*\n\\)\\{2,\\}"))
#+end_src

#+RESULTS:
: blank-lines

#+begin_src emacs-lisp
  (defun the-the ()
    (interactive)
    (if (re-search-forward
         "\\b\\([^@ \n\t]+\\)[ \n\t]+\\1\\b" nil 'move)
        (message "Found duplicated word.")
      (message "End of buffer")))
#+end_src

#+RESULTS:
: the-the

#+begin_example
one two two three four five
five six seven
#+end_example

* (info "(eintr) Counting Exercise")

#+begin_src emacs-lisp
  (defun count-puncuation (beg end)
    "Print number of punctuation marks in the region."
    (interactive "r")
    (message "Counting punctuation marks in the region...")
    (save-excursion
      (goto-char beg)
      (let ((count 0))
        (while (and (< (point) end)
                    (re-search-forward "[.,;:!?]" end t))
          (setq count (1+ count)))
        (cond ((zerop count)
               (message
                "The region does NOT have any punctuation marks."))
              ((= 1 count)
               (message
                "The region has 1 punctuation mark."))
              (t
               (message
                "The region has %d punctuation marks." count))))))
#+end_src

#+RESULTS:
: count-puncuation

#+begin_src emacs-lisp
  (defun recursive-count-punctuation (region-end)
    "Number of punctuation marks between point and REGION-END."
    (if (and (< (point) region-end)
             (re-search-forward "[.,;:!?]" region-end t))
        (1+ (recursive-count-punctuation region-end))
      0))

  (defun count-puncuation (beg end)
    (interactive "r")
    (save-excursion
      (goto-char beg)
      (let ((count (recursive-count-punctuation end)))
        (cond ((zerop count)
               (message
                "The region does NOT have any punctuation marks."))
              ((= 1 count)
               (message
                "The region has 1 punctuation mark."))
              (t
               (message
                "The region has %d punctuation marks." count))))))
#+end_src

#+RESULTS:
: count-puncuation
